{
    // http://eslint.org/docs/rules/ ,
  "env": {
    "node": true
  },
  "rules": {
////////// Possible Errors //////////
    "comma-dangle": 2, // disallow trailing commas in object literals
    "no-console": 1, // disallow use of console (off by default in the node environment)
    "no-cond-assign": [1, "always"], // disallow assignment in conditional expressions
    "no-constant-condition": 1, // disallow use of constant expressions in conditions
    "no-control-regex": 1, // disallow control characters in regular expressions
    "no-debugger": 1, // disallow use of debugger
    "no-dupe-keys": 2, // disallow duplicate keys when creating object literals
    "no-duplicate-case": 2, // disallow a duplicate case label.
    "no-empty": 1, // disallow empty statements
    "no-empty-character-class": 1, // disallow the use of empty character classes in regular expressions
    "no-ex-assign": 1, // disallow assigning to the exception in a catch block
    // "no-extra-boolean-cast": 0, // disallow double-negation boolean casts in a boolean context
    // "no-extra-parens": 0, // disallow unnecessary parentheses (off by default)
    "no-extra-semi": 1, // disallow unnecessary semicolons
    "no-func-assign": 1, // disallow overwriting functions written as function declarations
    "no-inner-declarations": [0, "both"], // disallow function or variable declarations in nested blocks
    // "no-invalid-regexp": 0, // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 1, // disallow irregular whitespace outside of strings and comments
    // "no-negated-in-lhs": 0, // disallow negation of the left operand of an in expression
    "no-obj-calls": 1, // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-prototype-builtins": 0, // disallow use of Object.prototypes builtins directly
    "no-regex-spaces": 1, // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays": 2, // disallow sparse arrays
    "no-unexpected-multiline": 1, // disallow confusing multiline expressions
    "no-unreachable": 1, // disallow unreachable statements after a return, throw, continue, or break statement
    "no-unsafe-finally": 1, // disallow control flow statements in finally blocks 
    "use-isnan": 1, // disallow comparisons with the value NaN
    "valid-jsdoc": 0, // Ensure JSDoc comments are valid (off by default)
    "valid-typeof": 2, // Ensure that the results of typeof are compared against a valid string

////////// Best Practices //////////
    "accessor-pairs": 0, // enforce getter and setter pairs in objects
    // "array-callback-return": 0, // Enforces return statements in callbacks of arrayâ€™s methods 
    "block-scoped-var": 2, // treat var statements as if they were block scoped (off by default)
    "complexity": 2, // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return": 0, // require return statements to either always or never specify values
    "curly": 2, // specify curly brace conventions for all control statements
    "default-case": 1, // require default case in switch statements (off by default)
    // "dot-location": [2, "property"], // Enforce newline before and after dot
    "dot-notation": [2, {
        "allowKeywords": true,
        "allowPattern": "^[a-z]+(_[a-z]+)+$"
    }], // encourages use of dot notation whenever possible
    "eqeqeq": [2, "smart"], // require the use of === and !==
    "guard-for-in": 1, // make sure for-in loops have an if statement (off by default)
    "no-alert": 1, // disallow the use of alert, confirm, and prompt
    "no-caller": 0, // disallow use of arguments.caller or arguments.callee
    "no-div-regex": 1, // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": 0, // disallow else after a return in an if (off by default)
    // "no-empty-function": 0, // Disallow empty functions
    // "no-empty-pattern": 0, // Disallow empty destructuring patterns 
    "no-eq-null": 1, // disallow comparisons to null without a type-checking operator (off by default)
    "no-eval": 1, // disallow use of eval()
    "no-extend-native": 2, // disallow adding to native types
    "no-extra-bind": 1, // disallow unnecessary function binding
    // "no-extra-label": 1, // Disallow Unnecessary Labels
    "no-fallthrough": 1, // disallow fallthrough of case statements
    "no-floating-decimal": 1, // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    // "no-implicit-coercion": 0, // Disallow the type conversion with shorter notations. 
    // "no-implicit-globals": 0, // Disallow var and Named Functions in Global Scope
    "no-implied-eval": 1, // disallow use of eval()-like methods
    // "no-invalid-this": 1, // Disallow this keywords outside of classes or class-like objects
    "no-iterator": 2, // disallow usage of __iterator__ property
    "no-labels": 1, // disallow use of labeled statements
    "no-lone-blocks": 1, // disallow unnecessary nested blocks
    "no-loop-func": 1, // disallow creation of functions within loops
    // "no-magic-numbers": [1, { "detectObjects": true, "ignore": [1], "ignoreArrayIndexes": true }], // Disallow Magic Numbers
    "no-multi-spaces": [1, { 
      "exceptions": { 
        "Property": true,
        "VariableDeclarator": true, 
        "AssignmentExpression": true
      }
    }], // disallow use of multiple spaces
    "no-multi-str": 1, // disallow use of multiline strings
    "no-native-reassign": 2, // disallow reassignments of native objects
    "no-new": 0, // disallow use of new operator when not part of the assignment or comparison
    "no-new-func": 1, // disallow use of new operator for Function object
    "no-new-wrappers": 1, // disallows creating new instances of String, Number, and Boolean
    "no-octal": 2, // disallow use of octal literals
    "no-octal-escape": 2, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    // "no-param-reassign": 0, // Disallow Reassignment of Function Parameters
    "no-proto": 1, // disallow usage of __proto__ property
    "no-redeclare": 1, // disallow declaring the same variable more then once
    "no-return-assign": 0, // disallow use of assignment in return statement
    "no-script-url": 0, // disallow use of javascript urls.
    // "no-self-assign": 1, // Disallow Self Assignment 
    "no-self-compare": 1, // disallow comparisons where both sides are exactly the same (off by default)
    "no-sequences": 1, // disallow use of comma operator
    // "no-throw-literal": 2, // Restrict what can be thrown as an exception
    // "no-unmodified-loop-condition": 2, // Disallow unmodified conditions of loops
    "no-unused-expressions": 1, // disallow usage of expressions in statement position
    // "no-useless-call": 0, // Disallow unnecessary .call() and .apply()
    // "no-useless-concat": 1, // Disallow unnecessary .call() and .apply()
    // "no-useless-escape": 1, // Disallow unnecessary escape usage
    "no-void": 0, // disallow use of void operator (off by default)
    "no-warning-comments": 1, // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
    "no-with": 2, // disallow use of the with statement
    "radix": 0, // require use of the second argument for parseInt() (off by default)
    "vars-on-top": 0, // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": [2, "inside"], // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda": 0, // require or disallow Yoda conditions

////////// Strict Mode //////////
    "strict": [2, "global"], // controls location of Use Strict Directives

////////// Variables //////////
    // "init-declarations": 0, // Enforce/Disallow Variable Initializations
    "no-catch-shadow": 2, // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": 2, // disallow deletion of variables
    "no-label-var": 2, // disallow labels that share a name with a variable
    // "no-restricted-globals": 0, // Disallow specific global variables
    "no-shadow": 1, // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": 1, // disallow shadowing of names such as arguments
    "no-undef": 1, // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef-init": 0, // disallow use of undefined when initializing variables
    "no-undefined": 1, // disallow use of undefined variable (off by default)
    "no-unused-vars": 1, // disallow declaration of variables that are not used in the code
    "no-use-before-define": 1, // disallow use of variables before they are defined

////////// Node.js //////////
    // "callback-return": [2,  ["callback", "cb", "next"]], // Enforce Return After Callback
    // "global-require": 2, // Enforce require() on the top-level module scope
    "handle-callback-err": [2, "^.*(e|E)rr"], // enforces error handling in callbacks (off by default) (on by default in the node environment)
    "no-mixed-requires": 2, // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    "no-new-require": 2, // disallow use of new operator with the require function (off by default) (on by default in the node environment)
    "no-path-concat": 2, // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    "no-process-env": 0, // Disallow process.env
    "no-process-exit": 2, // disallow process.exit() (on by default in the node environment)
    "no-restricted-modules": 0, // restrict usage of specified node modules (off by default)
    "no-sync": 1, // disallow use of synchronous methods (off by default)

////////// Stylistic Issues //////////
    "array-bracket-spacing": [2, "never"], // Disallow or enforce spaces inside of brackets
    "block-spacing": 2, // Disallow or enforce spaces inside of single line blocks
    "brace-style": [2, "1tbs", { "allowSingleLine": true }], // enforce one true brace style (off by default)
    "camelcase": 1, // require camel case names
    "comma-spacing": 1, // enforce spacing before and after comma
    "comma-style": 1, // enforce one true comma style (off by default)
    "computed-property-spacing": 0, // Disallow or enforce spaces inside of computed properties 
    "consistent-this": 1, // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": 2, // enforce newline at the end of file, with no multiple empty lines
    "func-names": 1, // require function expressions to have a name (off by default)
    "func-style": [0, "expression"], // enforces use of function declarations or expressions (off by default)
    // "id-blacklist": 1, // disallow specified identifiers 
    // "id-length": 0, // enforce minimum and maximum identifier lengths 
    // "id-match": 0, // require identifiers to match a specified regular expression
    "indent": [1, 2, { 
      "SwitchCase": 1, 
      "VariableDeclarator": { "var": 2, "let": 2, "const": 3 } 
    }], // this option sets a specific tab width for your code (off by default)
    // "jsx-quotes": [1], // enforce the consistent use of either double or single quotes in JSX attributes
    "key-spacing": 1, // enforces spacing between keys and values in object literal properties
    "keyword-spacing": 1, // enforce consistent spacing before and after keywords
    "linebreak-style": 0, // enforce consistent linebreak style 
    "lines-around-comment": 1, // require empty lines around comments  
    "max-nested-callbacks": 0, // specify the maximum depth callbacks can be nested (off by default)   
    "max-depth": [1, 3], // enforce a maximum depth that blocks can be nested
    "max-len": [1,120], // enforce a maximum line length
    "max-statements": [1, 15], // enforce a statement length
    "max-statements-per-line": [1,  { "max": 2 }], // enforce a maximum number of statements allowed per line
    "new-cap": 1, // require a capital letter for constructors
    "new-parens": 1, // disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": 0, // require or disallow an empty line after var declarations
    "newline-before-return": 0, // require or disallow an empty line after var declarations
    "newline-per-chained-call": 1, // require a newline after each call in a method chain
    "no-array-constructor": 0, // disallow use of the Array constructor
    "no-bitwise": 1, // disallow bitwise operators
    "no-continue": 0, // disallow continue statements
    "no-inline-comments": 0, // disallow comments inline after code (off by default)
    "no-lonely-if": 1, // disallow if as the only statement in an else block (off by default)
    // "no-mixed-operators": 1, // Disallow mixes of different operators 
    "no-mixed-spaces-and-tabs": 2, // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": 0, // disallow multiple empty lines (off by default)
    "no-negated-condition": 0, // disallow negated conditions
    "no-nested-ternary": 0, // disallow nested ternary expressions (off by default)
    "no-new-object": 0, // disallow use of the Object constructor
    "no-plusplus": 0, // disallow the unary operators ++ and --
    "no-restricted-syntax": 0, // disallow specified syntax
    "no-spaced-func": 1, // disallow space between function identifier and application
    "no-ternary": 0, // disallow the use of ternary operators (off by default)
    "no-trailing-spaces": 1, // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 0, // disallow dangling underscores in identifiers
    "no-unneeded-ternary": 1, // Disallow conditional expressions that can be expressed with simpler constructs
    "no-whitespace-before-property": 1, // Disallow whitespace before properties 
    // "object-curly-newline": [1, { "multiline": true }], // require or disallow line breaks inside braces
    "object-curly-spacing": [2, "always"], // Disallow or enforce spaces inside of brackets
    "object-property-newline": 1, // enforce placing object properties on separate lines
    "one-var": [1, "never"], // allow just one var statement per function (off by default)
    "one-var-declaration-per-line": 0, // Require or disallow an newline around variable declarations
    "operator-assignment": 0, // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "operator-linebreak": 1, // Operator Linebreak 
    "padded-blocks": 0, // enforce padding within blocks (off by default)
    "quote-props": [2, "as-needed"], // require quotes around object literal property names (off by default)
    "quotes": [2, "single"], // specify whether double or single quotes should be used
    "require-jsdoc": 2, // Require JSDoc comment
    "semi": [2, "always"], // require or disallow use of semicolons instead of ASI
    "semi-spacing": [2, {
        "before": false,
        "after": true
    }], // enforce spacing before and after semicolons
    "sort-vars": 0, // sort variables within the same declaration block (off by default)
    "space-before-blocks": 0, // require or disallow space before blocks (off by default)
    "space-before-function-paren": [1, { 
      "anonymous": "always", 
      "named": "never" 
    }], // Require or disallow a space before function parenthesis
    "space-in-parens": 0, // require or disallow spaces inside parentheses (off by default)
    "space-infix-ops": 1, // require spaces around operators
    "space-unary-ops": [1, {
        "words": true,
        "nonwords": false
    }], // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "spaced-comment": [1, "always", { 
      "exceptions": ["-", "+"], 
      "markers": ["/"] 
    }], // enforce consistent spacing after the // or /* in a comment
    "unicode-bom": 2, // Require or disallow the Unicode Byte Order Mark (BOM) 
    "wrap-regex": 1 // require regex literals to be wrapped in parentheses (off by default),   
  }
}
